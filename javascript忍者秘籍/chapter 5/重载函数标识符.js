/**
 * JavaScript的这种行为是由标识符注册的结果直接导致的。在处理过
 * 程的第2步中，通过函数声明进行定义的函数在代码执行之前对函数进
 * 行创建，并赋值给对应的标识符；在第3步，处理变量的声明，那些在
 * 当前环境中未声明的变量，将被赋值为undefined。在清单5.10的示例
 * 中，在第2步——注册函数声明时，由于标识符fun已经存在，并未被赋
 * 值为undefined。这就是第1个测试fun是否是函数的断言执行通过的原
 * 因。之后，执行赋值语句var fun = 3，将数字3赋值给标识符fun。执行
 * 完这个赋值语句之后，fun就不再指向函数了，而是指向数字3。
 */
console.log('1 fun: ', fun);

var fun = 3;

console.log('2 fun: ', fun);

function fun() { }

console.log('3 fun: ', fun);